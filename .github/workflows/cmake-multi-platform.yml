name: CMake Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set build dir
      id: vars
      shell: bash
      run: echo "dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev

    - name: Cache vcpkg
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: |
          vcpkg/buildtrees
          vcpkg/installed
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (!(Test-Path "vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
        }
        .\vcpkg\vcpkg install sdl2 sdl2-image sdl2-ttf
        echo "VCPKG_ROOT=${PWD}\vcpkg" >> $env:GITHUB_ENV

    - name: Configure
      run: >
        cmake -B ${{ steps.vars.outputs.dir }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}
        ${{ matrix.os == 'windows-latest' && format('-DCMAKE_TOOLCHAIN_FILE={0}/scripts/buildsystems/vcpkg.cmake', env.VCPKG_ROOT) || '' }}

    - name: Build
      run: cmake --build ${{ steps.vars.outputs.dir }} --config Release

    - name: Test
      working-directory: ${{ steps.vars.outputs.dir }}
      run: ctest --build-config Release

    - name: Upload .so
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: libwarpengine.so
        path: ${{ steps.vars.outputs.dir }}/libwarpengine.so

    - name: Upload .dll
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: warpengine.dll
        path: ${{ steps.vars.outputs.dir }}/Release/warpengine.dll
